//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""PlayerActions"",
            ""id"": ""a5d6c7b5-b125-47fb-86e9-f029036ead2d"",
            ""actions"": [
                {
                    ""name"": ""PlayerOneTriggers"",
                    ""type"": ""Button"",
                    ""id"": ""a272be01-8455-4b97-9405-069fb9853e9b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PlayerOneMovement"",
                    ""type"": ""Value"",
                    ""id"": ""86b9314e-8319-4bec-89ad-3367c0e75eb8"",
                    ""expectedControlType"": ""Dpad"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PlayerTwoTriggers"",
                    ""type"": ""Button"",
                    ""id"": ""22f1f575-5104-4525-91a0-385bdc0a9c98"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PlayerTwoMovement"",
                    ""type"": ""Value"",
                    ""id"": ""a9e8d28e-0cf6-4c32-a069-289b8e91fd52"",
                    ""expectedControlType"": ""Dpad"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9a16c8cc-4c44-423c-ae91-0b6a00620c60"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""PlayerOneTriggers"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""d5849bd2-9dbb-4b23-b228-99e2167abbfc"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerOneMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""f26b6713-2fee-4106-a344-1e9ff0c94b9f"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""PlayerOneMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""930a2547-798b-48d5-b47e-be0660411dd2"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""PlayerOneMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""7c55f20d-f227-4d19-bb79-a49f8450cd38"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""PlayerOneMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""cd42c6b6-ab1c-4899-a01c-b2526fd4939b"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""PlayerOneMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""a4966bcb-6c88-495c-aad3-159928d41154"",
                    ""path"": ""<Keyboard>/numpad0"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""PlayerTwoTriggers"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""68de43cf-2fd6-4f13-babf-b57226289acc"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerTwoMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""1bcdc64d-a588-4b9e-a107-4b79c65fc7f7"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""PlayerTwoMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""197ddee1-5c52-4db4-a8a6-513aa7ba03eb"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""PlayerTwoMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""0f44dbae-066d-418f-a45c-0fe2c183299a"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""PlayerTwoMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""3edff3d2-039a-4e4e-a853-0e235ce2b0db"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""PlayerTwoMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": []
        }
    ]
}");
        // PlayerActions
        m_PlayerActions = asset.FindActionMap("PlayerActions", throwIfNotFound: true);
        m_PlayerActions_PlayerOneTriggers = m_PlayerActions.FindAction("PlayerOneTriggers", throwIfNotFound: true);
        m_PlayerActions_PlayerOneMovement = m_PlayerActions.FindAction("PlayerOneMovement", throwIfNotFound: true);
        m_PlayerActions_PlayerTwoTriggers = m_PlayerActions.FindAction("PlayerTwoTriggers", throwIfNotFound: true);
        m_PlayerActions_PlayerTwoMovement = m_PlayerActions.FindAction("PlayerTwoMovement", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerActions
    private readonly InputActionMap m_PlayerActions;
    private IPlayerActionsActions m_PlayerActionsActionsCallbackInterface;
    private readonly InputAction m_PlayerActions_PlayerOneTriggers;
    private readonly InputAction m_PlayerActions_PlayerOneMovement;
    private readonly InputAction m_PlayerActions_PlayerTwoTriggers;
    private readonly InputAction m_PlayerActions_PlayerTwoMovement;
    public struct PlayerActionsActions
    {
        private @PlayerInputActions m_Wrapper;
        public PlayerActionsActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @PlayerOneTriggers => m_Wrapper.m_PlayerActions_PlayerOneTriggers;
        public InputAction @PlayerOneMovement => m_Wrapper.m_PlayerActions_PlayerOneMovement;
        public InputAction @PlayerTwoTriggers => m_Wrapper.m_PlayerActions_PlayerTwoTriggers;
        public InputAction @PlayerTwoMovement => m_Wrapper.m_PlayerActions_PlayerTwoMovement;
        public InputActionMap Get() { return m_Wrapper.m_PlayerActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActionsActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActionsActions instance)
        {
            if (m_Wrapper.m_PlayerActionsActionsCallbackInterface != null)
            {
                @PlayerOneTriggers.started -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnPlayerOneTriggers;
                @PlayerOneTriggers.performed -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnPlayerOneTriggers;
                @PlayerOneTriggers.canceled -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnPlayerOneTriggers;
                @PlayerOneMovement.started -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnPlayerOneMovement;
                @PlayerOneMovement.performed -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnPlayerOneMovement;
                @PlayerOneMovement.canceled -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnPlayerOneMovement;
                @PlayerTwoTriggers.started -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnPlayerTwoTriggers;
                @PlayerTwoTriggers.performed -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnPlayerTwoTriggers;
                @PlayerTwoTriggers.canceled -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnPlayerTwoTriggers;
                @PlayerTwoMovement.started -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnPlayerTwoMovement;
                @PlayerTwoMovement.performed -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnPlayerTwoMovement;
                @PlayerTwoMovement.canceled -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnPlayerTwoMovement;
            }
            m_Wrapper.m_PlayerActionsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @PlayerOneTriggers.started += instance.OnPlayerOneTriggers;
                @PlayerOneTriggers.performed += instance.OnPlayerOneTriggers;
                @PlayerOneTriggers.canceled += instance.OnPlayerOneTriggers;
                @PlayerOneMovement.started += instance.OnPlayerOneMovement;
                @PlayerOneMovement.performed += instance.OnPlayerOneMovement;
                @PlayerOneMovement.canceled += instance.OnPlayerOneMovement;
                @PlayerTwoTriggers.started += instance.OnPlayerTwoTriggers;
                @PlayerTwoTriggers.performed += instance.OnPlayerTwoTriggers;
                @PlayerTwoTriggers.canceled += instance.OnPlayerTwoTriggers;
                @PlayerTwoMovement.started += instance.OnPlayerTwoMovement;
                @PlayerTwoMovement.performed += instance.OnPlayerTwoMovement;
                @PlayerTwoMovement.canceled += instance.OnPlayerTwoMovement;
            }
        }
    }
    public PlayerActionsActions @PlayerActions => new PlayerActionsActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    public interface IPlayerActionsActions
    {
        void OnPlayerOneTriggers(InputAction.CallbackContext context);
        void OnPlayerOneMovement(InputAction.CallbackContext context);
        void OnPlayerTwoTriggers(InputAction.CallbackContext context);
        void OnPlayerTwoMovement(InputAction.CallbackContext context);
    }
}
